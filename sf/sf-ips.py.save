#!/usr/bin/python

# modified by SF to count IPs and not IP/port combos

import sys
import os
import csv
import time
from datetime import datetime

# map from date structure to just hour granularity
def justhour(val):
    return val[:13]

def hourofday(val):
    #print "hourofday: " + val + " gives: " + val[-2:]
    return int(val[-2:])

# our various output files, timestamped

# the timestamp, in time_t format
now=str(int(time.time()))
str_now=str(datetime.now())

# has counts of IP's seen listening on which ports or both at that hour
hour_f="hours." + now + ".csv"
hour_f_header="hour,count(port80),count(port443),count(both)"
hour_fp=open(hour_f,"w");

# count per IP of how often/when seen
allip_f="ips." + now + ".csv"
allip_f_header="ip,firstseen,lastseen,count(80's),count(443's)"
allip_fp=open(allip_f,"w");

# count for "regularly-seen" IPs, same details as above
regip_f="regips." + now + ".csv"
regip_f_header="ip,obs_needed,firstseen,lastseen,count(80's),count(443's)"
regip_fp=open(regip_f,"w");

# sorta human readable summary
summary_f="summary." + now + ".txt"
summary_fp=open(summary_f,"w")

# how often do we need to see an IP for it to be "regularly-seen" 
# as a percentage of the number of hourly observations
reg_percent=90

# all other IPs are "irregular"
irregip_f="irregips." + now + ".csv"
irregip_f_header="ip,obs_needed,firstseen,lastseen,count(80's),count(443's)"
# include this total as a check of our calcs - should be sum of the two counts
irregip_f_header += ",total of hourly obs"
for h in range(0,24):
    irregip_f_header += "," + str(h)
irregip_fp=open(irregip_f,"w");

# collect info per hour
hourlycounts={}
thishour=""
thishour_port80=[]
thishour_port443=[]
thishour_both=[]

# collect info on each ip
ipdets={}

# full mode - real data not in repo
home=os.path.expanduser('~')
file=home+'/data/tcd-surveys/trinityIps.csv'
verbose=False

# test mode
if len(sys.argv)==2 and sys.argv[1] == 'test':
    # use a short test file with few records, with synthetic data generated using the m100.sh script
    filefewrecs='tmp2.csv'
    verbose=True

if verbose:
    print "Reading from " + file

if not os.path.isfile(file) or not os.access(file,os.R_OK):
    print "Can't read input file: " + file + " - exiting"
    sys.exit(1)

with open(file) as csvfile:
    readCSV = csv.reader(csvfile, delimiter=',')
    for line in readCSV:
        hour=justhour(line[-3])
        # special case for first record
        if thishour=="":
            thishour=hour
        ip=line[0]
        port=line[6]
        #print ip + ":" + port
        if port != "80" and port != "443":
            print "Error - bad port: " + port
            continue

        if hour!=thishour:
            # a new hour
            if verbose:
                print "80:", thishour_port80
                print
                print "443:", thishour_port443
                print
                print "both:", thishour_both
                print
            # check who's got both, don't remove while iterating on a list!
            t80=list(thishour_port80)
            t443=list(thishour_port443)
            for ip80 in thishour_port80:
                if ip80 in thishour_port443:
                    if ip80 not in thishour_both:
                        thishour_both.append(ip80)
                    t80.remove(ip80)
                    t443.remove(ip80)
            del thishour_port80
            del thishour_port443
            thishour_port80=t80
            thishour_port443=t443

            if verbose:
                print "80:", thishour_port80
                print
                print "443:", thishour_port443
                print
                print "both:", thishour_both
                print
            # accumulate
            hourlycounts[thishour]=[len(thishour_port80),len(thishour_port443),len(thishour_both)]
            # re-init
            thishour_port80=[]
            thishour_port443=[]
            thishour_both=[]
            thishour=hour
        if port=="80" and ip not in thishour_port80:
            thishour_port80.append(ip)
        elif port=="443" and ip not in thishour_port443:
            thishour_port443.append(ip)

        # accumulate details on this IP
        if ip not in ipdets:
            ipdets[ip]={}
            ipdets[ip]['80']=0
            ipdets[ip]['443']=0
            # the 24 hours in the day
            ipdets[ip]['hours']=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        thisone=ipdets[ip]
        if 'firstseen' not in thisone:
            thisone['firstseen']=hour
        thisone['lastseen']=hour
        thisone[port] += 1
        hod=hourofday(hour)
        thisone['hours'][hod] += 1

    # the last hour
    if verbose:
        print "80:", thishour_port80
        print
        print "443:", thishour_port443
        print
        print "both:", thishour_both
        print
    # check who's got both
    t80=list(thishour_port80)
    t443=list(thishour_port443)
    for ip80 in thishour_port80:
        if ip80 in thishour_port443:
            if ip80 not in thishour_both:
                thishour_both.append(ip80)
            t80.remove(ip80)
            t443.remove(ip80)
    del thishour_port80
    del thishour_port443
    thishour_port80=t80
    thishour_port443=t443
    if verbose:
        print "80:", thishour_port80
        print
        print "443:", thishour_port443
        print
        print "both:", thishour_both
        print
    # accumulate
    hourlycounts[thishour]=[len(thishour_port80),len(thishour_port443),len(thishour_both)]

print >>hour_fp, hour_f_header
firsthour=""
lasthour=""
for h in sorted(hourlycounts):
    if firsthour=="":
        firsthour=h
    lasthour=h
    print >>hour_fp, h + "," +  str(hourlycounts[h][0]) + "," + str(hourlycounts[h][1]) + "," + str(hourlycounts[h][2])

print >>allip_fp, allip_f_header
for det in sorted(ipdets):
    print >>allip_fp, det + "," + \
        ipdets[det]['firstseen'] + "," + \
        ipdets[det]['lastseen'] + "," + \
        str(ipdets[det]['80']) + "," + \
        str(ipdets[det]['443']) 

# split IPs into regular/irregular
obs_needed=int(len(hourlycounts)*reg_percent/100)

# counters
reg_tot=0
reg_80=0
reg_443=0
reg_both=0
irreg_tot=0
irreg_80=0
irreg_443=0
irreg_both=0

print >>regip_fp, regip_f_header
print >>irregip_fp, irregip_f_header
for det in sorted(ipdets):
    # if either port is regular...
    # if ipdets[det]['80'] >= obs_needed or ipdets[det]['443'] >= obs_needed:
    # a zero count is regular, but non-zero and < obs_needed is not...
    if (ipdets[det]['80']==0 or ipdets[det]['80'] >= obs_needed) \
            and (ipdets[det]['443']==0 or ipdets[det]['443'] >= obs_needed):
        reg_tot += 1
        if ipdets[det]['80'] > 0 and ipdets[det]['443']==0: 
            reg_80 += 1
        elif ipdets[det]['80'] == 0 and ipdets[det]['443']>0: 
            reg_443 += 1
        elif ipdets[det]['80'] > 0 and ipdets[det]['443']>0: 
            reg_both += 1
        print >>regip_fp, det + "," + \
            str(obs_needed) + "," + \
            ipdets[det]['firstseen'] + "," + \
            ipdets[det]['lastseen'] + "," + \
            str(ipdets[det]['80']) + "," + \
            str(ipdets[det]['443']) 
    else:
        irreg_tot += 1
        if ipdets[det]['80'] > 0 and ipdets[det]['443']==0: 
            irreg_80 += 1
        elif ipdets[det]['80'] == 0 and ipdets[det]['443']>0: 
            irreg_443 += 1
        elif ipdets[det]['80'] > 0 and ipdets[det]['443']>0: 
            irreg_both += 1
        hstring=""
        tot_obs=0
        for h in range(0,24):
            hstring += "," + str(ipdets[det]['hours'][h])
            tot_obs += ipdets[det]['hours'][h]
        print >>irregip_fp, det + "," + \
            str(obs_needed) + "," + \
            ipdets[det]['firstseen'] + "," + \
            ipdets[det]['lastseen'] + "," + \
            str(ipdets[det]['80']) + "," + \
            str(ipdets[det]['443']) + "," +\
            str(tot_obs) + hstring 

# summarise
print >>summary_fp, "Ran " + sys.argv[0] + " at " + str_now + " (" + now + ")"
print >>summary_fp, "Total observations slots = " + str(len(hourlycounts))
print >>summary_fp, "\t first: " + firsthour 
print >>summary_fp, "\t last: " + lasthour 
print >>summary_fp, "Total ips seen = " + str(len(ipdets))
print >>summary_fp, "IPs consider regular if seen " + \
    str(reg_percent) + "% of the time: " +  \
    str(obs_needed) + " from " + str(len(hourlycounts))
print >>summary_fp, "Regular ips seen = " + str(reg_tot)
print >>summary_fp, "\tport 80 only  = " + str(reg_80)
print >>summary_fp, "\tport 443 only  = " + str(reg_443)
print >>summary_fp, "\tboth  = " + str(reg_both)
print >>summary_fp, "Irregular ips seen = " + str(irreg_tot)
print >>summary_fp, "\tport 80 only  = " + str(irreg_80)
print >>summary_fp, "\tport 443 only  = " + str(irreg_443)
print >>summary_fp, "\tboth  = " + str(irreg_both)
print >>summary_fp, "Files created:"
print >>summary_fp, "\tthis: " + summary_f
print >>summary_fp, "\thourly counts: " + hour_f
print >>summary_fp, "\tall IP counts: " + allip_f
print >>summary_fp, "\tregular IP counts: " + regip_f
print >>summary_fp, "\tirregular IP counts/hours: " + irregip_f



